import { VideoPlayer } from '@video-framework/core/src/VideoPlayer';
import { VideoSource, Quality, SubtitleTrack, AudioTrack, DRMConfig, VideoPlayerConfig, TimeRanges } from '@video-framework/core/src/interfaces';
export declare class HTML5Player extends VideoPlayer {
    private videoElement;
    private container;
    private hls?;
    private dash?;
    private qualities;
    private currentQuality;
    private subtitleTracks;
    private audioTracks;
    private isInitialized;
    constructor(container: HTMLElement, config?: VideoPlayerConfig);
    private createVideoElement;
    private setupEventListeners;
    load(source: VideoSource): Promise<void>;
    private isHLS;
    private isDASH;
    private loadHLS;
    private loadDASH;
    private loadSubtitles;
    play(): Promise<void>;
    pause(): void;
    stop(): void;
    seek(position: number): void;
    setVolume(volume: number): void;
    setPlaybackRate(rate: number): void;
    getCurrentTime(): number;
    getDuration(): number;
    getVolume(): number;
    getPlaybackRate(): number;
    isMuted(): boolean;
    setMuted(muted: boolean): void;
    getAvailableQualities(): Quality[];
    getCurrentQuality(): Quality | null;
    setQuality(quality: Quality): void;
    enableAutoQuality(enabled: boolean): void;
    getSubtitleTracks(): SubtitleTrack[];
    getCurrentSubtitleTrack(): SubtitleTrack | null;
    setSubtitleTrack(track: SubtitleTrack | null): void;
    getAudioTracks(): AudioTrack[];
    getCurrentAudioTrack(): AudioTrack | null;
    setAudioTrack(track: AudioTrack): void;
    enterFullscreen(): void;
    exitFullscreen(): void;
    isFullscreen(): boolean;
    enterPictureInPicture(): void;
    exitPictureInPicture(): void;
    isPictureInPicture(): boolean;
    getBufferedRanges(): TimeRanges;
    getSeekableRanges(): TimeRanges;
    getBandwidth(): number;
    getNetworkState(): number;
    getVideoWidth(): number;
    getVideoHeight(): number;
    getDroppedFrames(): number;
    getDecodedFrames(): number;
    protected applyConfig(): void;
    protected configureDRM(drmConfig: DRMConfig): Promise<void>;
    private cleanupStreamingLibraries;
    destroy(): void;
}
//# sourceMappingURL=HTML5Player.d.ts.map