import { BasePlayer } from '@unified-video/core';
declare global {
    interface Window {
        Hls: any;
        dashjs: any;
        cast?: any;
        chrome?: any;
        __onGCastApiAvailable?: (isAvailable: boolean) => void;
    }
}
export declare class WebPlayer extends BasePlayer {
    protected video: HTMLVideoElement | null;
    private hls;
    private dash;
    private qualities;
    private currentQualityIndex;
    private autoQuality;
    private useCustomControls;
    private controlsContainer;
    private hideControlsTimeout;
    private volumeHideTimeout;
    private isVolumeSliding;
    private isDragging;
    private watermarkCanvas;
    private playerWrapper;
    private previewGateHit;
    private paymentSuccessTime;
    private paymentSuccessful;
    private isPaywallActive;
    private authValidationInterval;
    private overlayRemovalAttempts;
    private maxOverlayRemovalAttempts;
    private lastSecurityCheck;
    private castContext;
    private remotePlayer;
    private remoteController;
    private isCasting;
    private _castTrackIdByKey;
    private selectedSubtitleKey;
    private _kiTo;
    private paywallController;
    private _playPromise;
    private _deferredPause;
    private _lastToggleAt;
    private _TOGGLE_DEBOUNCE_MS;
    private debugLog;
    private debugError;
    private debugWarn;
    protected setupPlayer(): Promise<void>;
    private setupVideoEventListeners;
    private getMediaErrorMessage;
    private updateBufferProgress;
    load(source: any): Promise<void>;
    private detectSourceType;
    private loadHLS;
    private handleHLSError;
    private loadDASH;
    private updateDASHQuality;
    private loadNative;
    protected loadScript(src: string): Promise<void>;
    private loadSubtitles;
    private isAbortPlayError;
    play(): Promise<void>;
    pause(): void;
    requestPause(): void;
    seek(time: number): void;
    setVolume(level: number): void;
    mute(): void;
    unmute(): void;
    setPlaybackRate(rate: number): void;
    getCurrentTime(): number;
    getQualities(): any[];
    getCurrentQuality(): any;
    setQuality(index: number): void;
    setAutoQuality(enabled: boolean): void;
    enterFullscreen(): Promise<void>;
    exitFullscreen(): Promise<void>;
    enterPictureInPicture(): Promise<void>;
    exitPictureInPicture(): Promise<void>;
    protected applySubtitleTrack(track: any): void;
    protected removeSubtitles(): void;
    private injectStyles;
    private getPlayerStyles;
    private createCustomControls;
    private setupControlsEventListeners;
    protected setupKeyboardShortcuts(): void;
    protected setupWatermark(): void;
    setPaywallConfig(config: any): void;
    private togglePlayPause;
    private enforceFreePreviewGate;
    setFreeDuration(seconds: number): void;
    resetFreePreviewGate(): void;
    resetPaymentStatus(): void;
    private toggleMuteAction;
    private handleVolumeChange;
    private handleProgressChange;
    private formatTime;
    private updateTimeDisplay;
    private showControls;
    private hideControls;
    private scheduleHideControls;
    private isFullscreen;
    private setupFullscreenListeners;
    private updateTimeTooltip;
    private hideTimeTooltip;
    private showShortcutIndicator;
    setSettingsScrollbarStyle(mode: 'default' | 'compact' | 'overlay'): void;
    setSettingsScrollbarConfig(options: {
        widthPx?: number;
        intensity?: number;
    }): void;
    private applyScrollbarPreferencesFromDataset;
    setTheme(theme: any): void;
    private _parseRgb;
    private _rgbToString;
    private _lightenRgb;
    private _toRgba;
    private changeVolume;
    private setSpeed;
    private setQualityByLabel;
    private togglePiP;
    private setupCastContextSafe;
    private setupCastContext;
    private enableCastRemoteControl;
    private disableCastRemoteControl;
    private _bindRemotePlayerEvents;
    private updateVolumeUIFromRemote;
    private _syncUIFromRemote;
    private _syncCastButtons;
    private _updateCastActiveTracks;
    private onCastButtonClick;
    private stopCasting;
    private initCast;
    private shareVideo;
    private updateMetadataUI;
    private showNotification;
    private canPlayVideo;
    private enforcePaywallSecurity;
    private startOverlayMonitoring;
    private handleSecurityViolation;
    private showSecurityViolationMessage;
    private cleanup;
    destroy(): Promise<void>;
}
//# sourceMappingURL=WebPlayer.d.ts.map